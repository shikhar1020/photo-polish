{"version":3,"sources":["Slider.js","SidebarItems.js","App.js","serviceWorker.js","index.js"],"names":["Slider","min","max","value","handleChange","className","type","onChange","SidebarItems","name","active","handleClick","onClick","DEFAULT_OPTIONS","property","range","unit","App","useState","selectedOptionIndex","setSelectedOptionIndex","options","setOptions","selectedOption","getImageStyle","filter","map","option","join","console","log","style","index","key","href","rel","target","prevOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qPAEe,SAASA,EAAT,GAAmD,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,aAC9C,OACI,yBAAKC,UAAU,mBACX,2BACIC,KAAK,QACLD,UAAU,SACVJ,IAAOA,EACPC,IAAOA,EACPC,MAASA,EACTI,SAAYH,K,MCRb,SAASI,EAAT,GAAoD,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,YAGhD,OACI,4BACIN,UAAS,sBAAiBK,EAAS,SAAW,IAC9CE,QAASD,GAEZF,GCJT,IAAMI,EAAkB,CACtB,CACEJ,KAAM,aACNK,SAAU,aACVX,MAAO,IACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,KAER,CACEP,KAAM,WACNK,SAAU,WACVX,MAAO,IACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,KAER,CACEP,KAAM,aACNK,SAAU,WACVX,MAAO,IACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,KAER,CACEP,KAAM,YACNK,SAAU,YACVX,MAAO,EACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,KAER,CACEP,KAAM,QACNK,SAAU,QACVX,MAAO,EACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,KAER,CACEP,KAAM,aACNK,SAAU,aACVX,MAAO,EACPY,MAAO,CACLd,IAAK,EACLC,IAAK,KAEPc,KAAM,OAER,CACEP,KAAM,OACNK,SAAU,OACVX,MAAO,EACPY,MAAO,CACLd,IAAK,EACLC,IAAK,IAEPc,KAAM,OAuDKC,MAnDf,WACE,MAAsDC,mBAAS,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAA8BF,mBAASL,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACMC,EAAiBF,EAAQF,GAW/B,SAASK,IAKP,MAAO,CAAEC,OAJOJ,EAAQK,KAAI,SAAAC,GAC1B,MAAM,GAAN,OAAUA,EAAOb,SAAjB,YAA6Ba,EAAOxB,OAApC,OAA4CwB,EAAOX,KAAnD,QAGuBY,KAAK,MAMhC,OAFAC,QAAQC,IAAIN,KAGV,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,QAAQ0B,MAAQP,MAC7B,yBAAKnB,UAAU,WACZgB,EAAQK,KAAI,SAACC,EAAQK,GACpB,OACE,kBAACxB,EAAD,CACEyB,IAAOD,EACPvB,KAAQkB,EAAOlB,KACfC,OAAQsB,IAAUb,EAClBR,YAAc,kBAAMS,EAAuBY,SAIjD,uBAAG3B,UAAU,YAAY6B,KAAK,sCAAsCC,IAAI,sBAAsBC,OAAO,UAArG,4BAEF,kBAACpC,EAAD,CACEC,IAAKsB,EAAeR,MAAMd,IAC1BC,IAAKqB,EAAeR,MAAMb,IAC1BC,MAAOoB,EAAepB,MACtBC,aAxCR,YAAwC,IAAVgC,EAAS,EAATA,OAC5Bd,GAAW,SAAAe,GACT,OAAOA,EAAYX,KAAI,SAACC,EAAQK,GAC9B,OAAIA,IAAUb,EAA4BQ,EACnC,2BAAKA,GAAZ,IAAoBxB,MAAOiC,EAAOjC,mBC7EtBmC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.dc22008c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Slider({ min, max, value, handleChange}) {\r\n    return (\r\n        <div className=\"sliderContainer\">\r\n            <input \r\n                type=\"range\" \r\n                className=\"slider\"\r\n                min = {min}\r\n                max = {max}\r\n                value = {value}\r\n                onChange = {handleChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './sidebarItems.css'\r\n\r\nexport default function SidebarItems({name, active, handleClick}) {\r\n    \r\n    \r\n    return (\r\n        <button \r\n            className={`sidebarItem ${active ? 'active' : ''}`}\r\n            onClick={handleClick}\r\n        >\r\n        {name}\r\n    </button>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport Slider from './Slider';\nimport SidebarItems from './SidebarItems';\n\n\nconst DEFAULT_OPTIONS = [\n  {\n    name: \"Brightness\",\n    property: \"brightness\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\"\n  },\n  {\n    name: \"Contrast\",\n    property: \"contrast\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\"\n  },\n  {\n    name: \"Saturation\",\n    property: \"saturate\",\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: \"%\"\n  },\n  {\n    name: \"Grayscale\",\n    property: \"grayscale\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\"\n  },\n  {\n    name: \"Sepia\",\n    property: \"sepia\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: \"%\"\n  },\n  {\n    name: \"Hue Rotate\",\n    property: \"hue-rotate\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 360,\n    },\n    unit: \"deg\"\n  },\n  {\n    name: \"Blur\",\n    property: \"blur\",\n    value: 0,\n    range: {\n      min: 0,\n      max: 20,\n    },\n    unit: \"px\"\n  },\n]\n\nfunction App() {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\n  const [options, setOptions] = useState(DEFAULT_OPTIONS)\n  const selectedOption = options[selectedOptionIndex]\n\n  function handleSliderChange({ target}) {\n    setOptions(prevOptions => {\n      return prevOptions.map((option, index) => {\n        if (index !== selectedOptionIndex) return option\n        return { ...option, value: target.value }\n      })\n    })\n  }\n  \n  function getImageStyle(){\n    const filters = options.map(option => {\n      return `${option.property}(${option.value}${option.unit})`\n    })\n\n    return { filter: filters.join(' ') }\n\n  }\n\n  console.log(getImageStyle())\n\n  return (\n    <div className=\"appPage\">\n      <div className=\"image\" style= {getImageStyle()}/>\n        <div className=\"sidebar\">\n          {options.map((option, index) => {\n            return (\n              <SidebarItems \n                key = {index}\n                name = {option.name}\n                active={index === selectedOptionIndex}\n                handleClick= {() => setSelectedOptionIndex(index)}\n              />\n            )\n          })}\n          <a className=\"copyright\" href=\"https://shikhar-srivastava.web.app/\" rel=\"noopener noreferrer\" target=\"_blank\">Â© Shikhar Srivastava</a>\n        </div>      \n        <Slider \n          min={selectedOption.range.min}\n          max={selectedOption.range.max}\n          value={selectedOption.value}\n          handleChange={handleSliderChange}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}